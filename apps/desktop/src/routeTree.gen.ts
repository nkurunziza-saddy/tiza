/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StudentsRouteImport } from './routes/students'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LendingReturnsRouteImport } from './routes/lending-returns'
import { Route as BooksRouteImport } from './routes/books'
import { Route as IndexRouteImport } from './routes/index'

const StudentsRoute = StudentsRouteImport.update({
  id: '/students',
  path: '/students',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LendingReturnsRoute = LendingReturnsRouteImport.update({
  id: '/lending-returns',
  path: '/lending-returns',
  getParentRoute: () => rootRouteImport,
} as any)
const BooksRoute = BooksRouteImport.update({
  id: '/books',
  path: '/books',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/books': typeof BooksRoute
  '/lending-returns': typeof LendingReturnsRoute
  '/settings': typeof SettingsRoute
  '/students': typeof StudentsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/books': typeof BooksRoute
  '/lending-returns': typeof LendingReturnsRoute
  '/settings': typeof SettingsRoute
  '/students': typeof StudentsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/books': typeof BooksRoute
  '/lending-returns': typeof LendingReturnsRoute
  '/settings': typeof SettingsRoute
  '/students': typeof StudentsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/books' | '/lending-returns' | '/settings' | '/students'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/books' | '/lending-returns' | '/settings' | '/students'
  id:
    | '__root__'
    | '/'
    | '/books'
    | '/lending-returns'
    | '/settings'
    | '/students'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BooksRoute: typeof BooksRoute
  LendingReturnsRoute: typeof LendingReturnsRoute
  SettingsRoute: typeof SettingsRoute
  StudentsRoute: typeof StudentsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/students': {
      id: '/students'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof StudentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/lending-returns': {
      id: '/lending-returns'
      path: '/lending-returns'
      fullPath: '/lending-returns'
      preLoaderRoute: typeof LendingReturnsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/books': {
      id: '/books'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof BooksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BooksRoute: BooksRoute,
  LendingReturnsRoute: LendingReturnsRoute,
  SettingsRoute: SettingsRoute,
  StudentsRoute: StudentsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
