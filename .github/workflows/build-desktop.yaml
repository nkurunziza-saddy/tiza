name: Build Desktop App

on:
  push:
    tags: ["v*", "*.*.*"]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build"
        required: true
        default: "v0.0.0-test"

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            arch: "arm64"
            name: "macOS-arm64"
            target: "aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            arch: "x64"
            name: "macOS-x64"
            target: "x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
            arch: "x64"
            name: "Linux-x64"
            target: ""
          - platform: "windows-latest"
            args: ""
            arch: "x64"
            name: "Windows-x64"
            target: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./apps/desktop/src-tauri -> target"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build frontend
        working-directory: apps/desktop
        run: pnpm run build

      - name: Build the app
        working-directory: apps/desktop
        run: pnpm tauri build ${{ matrix.args }}

      - name: List build artifacts
        shell: bash
        run: |
          echo "Listing all files in target directory:"
          find apps/desktop/src-tauri/target -name "bundle" -type d 2>/dev/null || echo "No bundle directories found"
          find apps/desktop/src-tauri/target -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.dmg" -o -name "*.msi" -o -name "*.exe" -o -name "*.app" \) 2>/dev/null || echo "No bundle files found"

      - name: Prepare release assets
        shell: bash
        run: |
          # Create a temporary directory for release files
          mkdir -p release_files

          # Find and copy main installer files
          find apps/desktop/src-tauri/target -name "*.dmg" -exec cp {} release_files/ \;
          find apps/desktop/src-tauri/target -name "*.msi" -exec cp {} release_files/ \;
          find apps/desktop/src-tauri/target -name "*setup.exe" -exec cp {} release_files/ \;
          find apps/desktop/src-tauri/target -name "*.deb" -exec cp {} release_files/ \;
          find apps/desktop/src-tauri/target -name "*.AppImage" -exec cp {} release_files/ \;
          find apps/desktop/src-tauri/target -name "*.rpm" -exec cp {} release_files/ \;

          echo "Files prepared for release:"
          ls -la release_files/

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_files/*
          tag_name: ${{ github.ref_name }}
          name: "Tiza Desktop v${{ github.ref_name }}"
          body: |
            ## Tiza Desktop ${{ github.ref_name }}

            Download the installer for your operating system:

            ### Windows
            - **`.msi`** - Windows Installer (Recommended)
            - **`.exe`** - Setup Executable

            ### macOS
            - **`aarch64.dmg`** - Apple Silicon (M1/M2/M3)
            - **`x64.dmg`** - Intel Macs

            ### Linux
            - **`.AppImage`** - Universal Linux (Run anywhere)
            - **`.deb`** - Ubuntu/Debian Package
            - **`.rpm`** - RedHat/Fedora Package

            ### Installation
            - **Windows**: Run the `.msi` file
            - **macOS**: Open `.dmg` and drag to Applications
            - **Linux**: Make `.AppImage` executable or install `.deb`/`.rpm`

            ---
            **Auto-download**: Visit our website for automatic platform detection!
          draft: false
          prerelease: false
          generate_release_notes: true
